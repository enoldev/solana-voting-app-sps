// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class InitializePoll {
  static encode(message: InitializePoll, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.pollId);

    writer.uint32(18);
    writer.string(message.description);

    writer.uint32(24);
    writer.uint64(message.pollStart);

    writer.uint32(32);
    writer.uint64(message.pollEnd);
  }

  static decode(reader: Reader, length: i32): InitializePoll {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InitializePoll();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pollId = reader.uint64();
          break;

        case 2:
          message.description = reader.string();
          break;

        case 3:
          message.pollStart = reader.uint64();
          break;

        case 4:
          message.pollEnd = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  pollId: u64;
  description: string;
  pollStart: u64;
  pollEnd: u64;

  constructor(
    pollId: u64 = 0,
    description: string = "",
    pollStart: u64 = 0,
    pollEnd: u64 = 0
  ) {
    this.pollId = pollId;
    this.description = description;
    this.pollStart = pollStart;
    this.pollEnd = pollEnd;
  }
}
